{
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "greaterThan10",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "0": "contracts/CheckNumber.sol"
  },
  "ast": {
    "absolutePath": "contracts/CheckNumber.sol",
    "exportedSymbols": {
      "CheckNumber": [
        15
      ]
    },
    "id": 16,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1,
        "literals": [
          "solidity",
          ">=",
          "0.4",
          ".22",
          "<",
          "0.6",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:32:0"
      },
      {
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": null,
        "fullyImplemented": true,
        "id": 15,
        "linearizedBaseContracts": [
          15
        ],
        "name": "CheckNumber",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "body": {
              "id": 13,
              "nodeType": "Block",
              "src": "102:68:0",
              "statements": [
                {
                  "expression": {
                    "argumentTypes": null,
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 9,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 7,
                          "name": "size",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 3,
                          "src": "120:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3130",
                          "id": 8,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "127:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_10_by_1",
                            "typeString": "int_const 10"
                          },
                          "value": "10"
                        },
                        "src": "120:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "53697a65207368616c6c2062652067726561746572207468616e203130",
                        "id": 10,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "string",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "131:31:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_stringliteral_7386153676772b00d00b2c7367f6c4b1c6986f79fa92dbbfd8a92e9ad7251219",
                          "typeString": "literal_string \"Size shall be greater than 10\""
                        },
                        "value": "Size shall be greater than 10"
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        {
                          "typeIdentifier": "t_stringliteral_7386153676772b00d00b2c7367f6c4b1c6986f79fa92dbbfd8a92e9ad7251219",
                          "typeString": "literal_string \"Size shall be greater than 10\""
                        }
                      ],
                      "id": 6,
                      "name": "require",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [
                        33,
                        34
                      ],
                      "referencedDeclaration": 34,
                      "src": "112:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                        "typeString": "function (bool,string memory) pure"
                      }
                    },
                    "id": 11,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "112:51:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 12,
                  "nodeType": "ExpressionStatement",
                  "src": "112:51:0"
                }
              ]
            },
            "documentation": null,
            "id": 14,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "greaterThan10",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 4,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 3,
                  "name": "size",
                  "nodeType": "VariableDeclaration",
                  "scope": 14,
                  "src": "84:9:0",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 2,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "84:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                }
              ],
              "src": "83:11:0"
            },
            "returnParameters": {
              "id": 5,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "102:0:0"
            },
            "scope": 15,
            "src": "61:109:0",
            "stateMutability": "nonpayable",
            "superFunction": null,
            "visibility": "public"
          }
        ],
        "scope": 16,
        "src": "34:138:0"
      }
    ],
    "src": "0:173:0"
  },
  "bytecode": "608060405234801561001057600080fd5b5060d58061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063e6b685e314602d575b600080fd5b604760048036036020811015604157600080fd5b50356049565b005b600a8111609d576040805162461bcd60e51b815260206004820152601d60248201527f53697a65207368616c6c2062652067726561746572207468616e203130000000604482015290519081900360640190fd5b5056fea265627a7a72315820dc009da5de57709f4867b812ef88a504e478f7e62224201e96b3a392b7496fb164736f6c63430005100032",
  "bytecodeSha1": "15215438bc31ac9ef92b999b9bf99841e7a6f1b1",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.5.16+commit.9c3226ce"
  },
  "contractName": "CheckNumber",
  "coverageMap": {
    "branches": {
      "0": {
        "CheckNumber.greaterThan10": {
          "1": [
            120,
            129,
            true
          ]
        }
      }
    },
    "statements": {
      "0": {
        "CheckNumber.greaterThan10": {
          "0": [
            112,
            163
          ]
        }
      }
    }
  },
  "dependencies": [],
  "deployedBytecode": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063e6b685e314602d575b600080fd5b604760048036036020811015604157600080fd5b50356049565b005b600a8111609d576040805162461bcd60e51b815260206004820152601d60248201527f53697a65207368616c6c2062652067726561746572207468616e203130000000604482015290519081900360640190fd5b5056fea265627a7a72315820dc009da5de57709f4867b812ef88a504e478f7e62224201e96b3a392b7496fb164736f6c63430005100032",
  "deployedSourceMap": "34:138:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34:138:0;;;;;;;;;;;;;;;;;;;61:109;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;-1:-1;61:109:0;;:::i;:::-;;;127:2;120:4;:9;112:51;;;;;-1:-1:-1;;;112:51:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;61:109;:::o",
  "language": "Solidity",
  "natspec": {
    "methods": {}
  },
  "offset": [
    34,
    172
  ],
  "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xE6B685E3 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x47 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x49 JUMP JUMPDEST STOP JUMPDEST PUSH1 0xA DUP2 GT PUSH1 0x9D JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x53697A65207368616C6C2062652067726561746572207468616E203130000000 PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xDC STOP SWAP14 0xA5 0xDE JUMPI PUSH17 0x9F4867B812EF88A504E478F7E62224201E SWAP7 0xB3 LOG3 SWAP3 0xB7 0x49 PUSH16 0xB164736F6C6343000510003200000000 ",
  "pcMap": {
    "0": {
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x80"
    },
    "2": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "4": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "5": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "CALLVALUE",
      "path": "0"
    },
    "6": {
      "op": "DUP1"
    },
    "7": {
      "op": "ISZERO"
    },
    "8": {
      "op": "PUSH1",
      "value": "0xF"
    },
    "10": {
      "op": "JUMPI"
    },
    "11": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "13": {
      "op": "DUP1"
    },
    "14": {
      "dev": "Cannot send ether to nonpayable function",
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "REVERT",
      "path": "0"
    },
    "15": {
      "op": "JUMPDEST"
    },
    "16": {
      "offset": [
        34,
        172
      ],
      "op": "POP",
      "path": "0"
    },
    "17": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "19": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "20": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "LT",
      "path": "0"
    },
    "21": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x28"
    },
    "23": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "24": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "26": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "27": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0xE0"
    },
    "29": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "SHR",
      "path": "0"
    },
    "30": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "DUP1",
      "path": "0"
    },
    "31": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH4",
      "path": "0",
      "value": "0xE6B685E3"
    },
    "36": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "EQ",
      "path": "0"
    },
    "37": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x2D"
    },
    "39": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "40": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "41": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x0"
    },
    "43": {
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "DUP1",
      "path": "0"
    },
    "44": {
      "first_revert": true,
      "fn": null,
      "offset": [
        34,
        172
      ],
      "op": "REVERT",
      "path": "0"
    },
    "45": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "46": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x47"
    },
    "48": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "50": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "DUP1",
      "path": "0"
    },
    "51": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "CALLDATASIZE",
      "path": "0"
    },
    "52": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "SUB",
      "path": "0"
    },
    "53": {
      "op": "PUSH1",
      "value": "0x20"
    },
    "55": {
      "op": "DUP2"
    },
    "56": {
      "op": "LT"
    },
    "57": {
      "op": "ISZERO"
    },
    "58": {
      "op": "PUSH1",
      "value": "0x41"
    },
    "60": {
      "op": "JUMPI"
    },
    "61": {
      "op": "PUSH1",
      "value": "0x0"
    },
    "63": {
      "op": "DUP1"
    },
    "64": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        119
      ],
      "op": "REVERT",
      "path": "0"
    },
    "65": {
      "op": "JUMPDEST"
    },
    "66": {
      "op": "POP"
    },
    "67": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "CALLDATALOAD",
      "path": "0"
    },
    "68": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x49"
    },
    "70": {
      "fn": "CheckNumber.greaterThan10",
      "jump": "i",
      "offset": [
        61,
        170
      ],
      "op": "JUMP",
      "path": "0"
    },
    "71": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "72": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "STOP",
      "path": "0"
    },
    "73": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "74": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        127,
        129
      ],
      "op": "PUSH1",
      "path": "0",
      "statement": 0,
      "value": "0xA"
    },
    "76": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        120,
        124
      ],
      "op": "DUP2",
      "path": "0"
    },
    "77": {
      "branch": 1,
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        120,
        129
      ],
      "op": "GT",
      "path": "0"
    },
    "78": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x9D"
    },
    "80": {
      "branch": 1,
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "JUMPI",
      "path": "0"
    },
    "81": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x40"
    },
    "83": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP1",
      "path": "0"
    },
    "84": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "85": {
      "op": "PUSH3",
      "value": "0x461BCD"
    },
    "89": {
      "op": "PUSH1",
      "value": "0xE5"
    },
    "91": {
      "op": "SHL"
    },
    "92": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP2",
      "path": "0"
    },
    "93": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "94": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x20"
    },
    "96": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x4"
    },
    "98": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP3",
      "path": "0"
    },
    "99": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "ADD",
      "path": "0"
    },
    "100": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "101": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x1D"
    },
    "103": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x24"
    },
    "105": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP3",
      "path": "0"
    },
    "106": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "ADD",
      "path": "0"
    },
    "107": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "108": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH32",
      "path": "0",
      "value": "0x53697A65207368616C6C2062652067726561746572207468616E203130000000"
    },
    "141": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x44"
    },
    "143": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP3",
      "path": "0"
    },
    "144": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "ADD",
      "path": "0"
    },
    "145": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MSTORE",
      "path": "0"
    },
    "146": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "147": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "MLOAD",
      "path": "0"
    },
    "148": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "149": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "DUP2",
      "path": "0"
    },
    "150": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "151": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "SUB",
      "path": "0"
    },
    "152": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "PUSH1",
      "path": "0",
      "value": "0x64"
    },
    "154": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "ADD",
      "path": "0"
    },
    "155": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "SWAP1",
      "path": "0"
    },
    "156": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "REVERT",
      "path": "0"
    },
    "157": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        112,
        163
      ],
      "op": "JUMPDEST",
      "path": "0"
    },
    "158": {
      "fn": "CheckNumber.greaterThan10",
      "offset": [
        61,
        170
      ],
      "op": "POP",
      "path": "0"
    },
    "159": {
      "fn": "CheckNumber.greaterThan10",
      "jump": "o",
      "offset": [
        61,
        170
      ],
      "op": "JUMP",
      "path": "0"
    }
  },
  "sha1": "094e8be25b5d513a9c766c37cf3cee84a401f941",
  "source": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract CheckNumber {\n    function greaterThan10(uint size) public {\n        require(size > 10, \"Size shall be greater than 10\");\n    }\n}\n",
  "sourceMap": "34:138:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;34:138:0;;;;;;;",
  "sourcePath": "contracts/CheckNumber.sol",
  "type": "contract"
}